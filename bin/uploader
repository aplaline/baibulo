#!/usr/bin/env node

var mime = require("mime");
var find = require("node-dir");
var path = require("path");
var request = require("request");
var fs = require("fs");

var argv = require('minimist')(process.argv, {
  default: {
    dir: "./",
    url: "http://localhost:3001",
    version: "next"
  }
});

if (!argv.context) {
  var absolute = path.resolve(argv.dir);
  var last = path.dirname(absolute);
  argv.context = "/" + path.relative(last, absolute);
}

if (!argv.context.endsWith("/")) {
  argv.context += "/";
}

if (!argv.context.startsWith("/")) {
  argv.context = "/" + argv.context;
}

if (argv.h || argv.help || !argv.context) {
  console.log([
    'usage: upload [options]',
    '',
    '  --url content-server-url   Content uploader root URI [http://localhost:3000]',
    '  --dir dir                  Directory with content to upload [./]',
    '  --context context          Context name (defaults to folder name)',
    '  --version version          Content version [next]',
  ].join("\n"));
  process.exit(1);
}

find.files(argv.dir, function(error, files) {
  var absolutePath = path.resolve(argv.dir);
  files.forEach(function(file) {
    var absoluteFile = path.resolve(file);
    var resource = absoluteFile.substr(absolutePath.length + 1);
    console.log(file + " -> " + argv.context + resource + " (" + mime.lookup(file) + ")");
    fs.createReadStream(file).pipe(request({
      url: argv.url + argv.context + resource,
      method: "PUT",
      headers: {
        "Content-Type": mime.lookup(file),
        "Version": argv.version
      }
    }));
  });
});
