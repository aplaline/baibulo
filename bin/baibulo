#!/usr/bin/env node

var path = require("path");
var redis = require('../lib/redis-client');
var find = require("node-dir");
var deployFiles = require('../lib/versioned-content-deployer')

// read command-line parameters
var argv = require('minimist')(process.argv, {
  default: {
    dir: "./",
    context: undefined,
    version: "next",
    prefix: "content:",
    redis: process.env["REDIS_URL"] || "redis://localhost:6379"
  }
});

// show help and exit
if (argv.h || argv.help || argv._.length < 3) {
  console.log([
    'usage: content get-version|set-version|deploy [options]',
    '',
    '  --dir dir          Directory with content to upload [./]',
    '  --context context  Context name (defaults to folder name)',
    '  --version          Version (required if set)',
    '  --prefix prefix    Prefix for Redis keys [content:]',
    '  --redis            Redis server URL [redis://localhost:6379]'
  ].join("\n"));
  process.exit(1);
}

// validate and process context
if (!argv.context) {
  var absolute = path.resolve(".");
  var last = path.dirname(absolute);
  argv.context = "/" + path.relative(last, absolute);
}
if (!argv.context.startsWith("/")) {
  argv.context = "/" + argv.context;
}
if (argv.context.endsWith("/")) {
  argv.context = argv.context.substr(0, argv.context.length - 1);
}

var operations = {
  "set-version": function() {
    if (!argv.version) {
      return Promise.reject({ code: 500, message: "No version specified" });
    } else {
      return redis.set(argv.prefix + argv.context + ':current', argv.version)
        .then(function() {
          console.log("OK New default version for context '" + argv.context + "': " + argv.version);
        })
   }
  },
  "get-version": function() {
    return redis.get(argv.prefix + argv.context + ':current', argv.version)
      .then(function(version) {
        console.log(version);
      })
  },
  "deploy": function() {
    // dump progress to console
    function log(file, resource, version, contentType, result) {
      console.log("OK " + file + " -> " + resource + ":" + version + " (" + contentType + ") " + result.join(" "));
    }
    return new Promise(function(resolve, reject) {
      // read list of files and upload them to redis
      find.files(argv.dir, function(error, files) {
        var absolutePath = path.resolve(argv.dir);
        deployFiles(redis, absolutePath, argv.prefix, argv.context + "/", argv.version, files, log).then(resolve);
      });
    });
  }
}

// get the operation user requested (default: get)
var operation = operations[argv._[2]];
if (!operation) {
  console.log("Invalid operation specified");
  process.exit(2);
}

// initialize redis
redis.init(argv.redis);

// execute operation
operation()
  .catch(function(error) {
    console.log("ERROR: " + (typeof error === "string" ? error : JSON.stringify(error)));
    redis.client().quit();
    process.exit(3);
  })
  .then(function() {
    redis.client().quit();
  });
